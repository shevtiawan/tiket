<?php
namespace Shevtiawan\Tiket;
use Config;
use Exception;

DEFINE("HTTP_GET","GET");
DEFINE("HTTP_POST","POST");

class Tiket {
    
    // internal constant to enable/disable debugging
    const DEBUG = true;
    const OUTPUT = 'json';

    private $BaseUrl = "https://api.master18.tiket.com/";
    //private $Version = '20120228'; 
    
    private $SecretKey = "";
    private $Token = "";

    
    /**
     * Default constructor
     */
    public function  __construct()
    {
        $this->SetSecretKey(Config::get('tiket.SECRET_KEY'));
        if(Config::get('tiket.DEVELOPMENT_STAGE') === false)
        {
            $this->BaseUrl = 'https://api.tiket.com/';
        }
    }

    /**
     * Default destructor
     */
    public function __destruct()
    {
        //if($this->curl != null) curl_close($this->curl);
    }

    protected function SetSecretKey($key)
    {
        $this->SecretKey = (string) $key;
    }

    public function SetToken($token)
    {
        $this->Token = (string) $token;
    }
  
    public function GetPublic($lastsegment, $endpoint,$params=false){
        // Build the endpoint URL
        $url = $this->BaseUrl . $lastsegment.'/'. trim($endpoint,"/");
        // Append the client details
        //$params['secretkey'] = $this->SecretKey;
        //$params['client_secret'] = $this->ClientSecret;
        //$params['v'] = $this->Version;
        //$params['locale'] = $this->ClientLanguage;
        
        $params['output'] = 'json';
        // Return the result;
        return $this->GET($url,$params);
    }
    
    /** 
     * GetPrivate
     * Performs a request for a private resource
     * @param String $endpoint A particular endpoint of the Foursquare API
     * @param Array $params A set of parameters to be appended to the request, defaults to false (none)
     * @param bool $POST whether or not to use a POST request
     */
    public function GetPrivate($endpoint,$params=false,$POST=false){
        $url = $this->BaseUrl . trim($endpoint,"/");
        $params['oauth_token'] = $this->AuthToken;
        $params['v'] = $this->Version;
        $params['locale'] = $this->ClientLanguage;
        $params['output'] = 'json';
        if(!$POST) return $this->GET($url,$params);
        else return $this->POST($url,$params);
    }

    /**
     * Request
     * Performs a cUrl request with a url generated by MakeUrl. The useragent of the request is hardcoded
     * as the Google Chrome Browser agent
     * @param String $url The base url to query
     * @param Array $params The parameters to pass to the request
     */
    private function Request($url,$params=false,$type=HTTP_GET){
        
        // Populate data for the GET request
        if($type == HTTP_GET) $url = $this->MakeUrl($url,$params);
        
        
        // borrowed from Andy Langton: http://andylangton.co.uk/
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL,$url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
        if ( isset($_SERVER['HTTP_USER_AGENT']) ) {
            curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT'] );
        } else {
            // Handle the useragent like we are Google Chrome
            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.X.Y.Z Safari/525.13.');
        }
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        //$acceptLanguage[] = "Accept-Language:" . $this->ClientLanguage;
        //curl_setopt($ch, CURLOPT_HTTPHEADER, $acceptLanguage); 
        // Populate the data for POST
        if($type == HTTP_POST) {
            curl_setopt($ch, CURLOPT_POST, 1); 
            if($params) curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        }

        //execute
        $response=curl_exec($ch);
        $headers=curl_getinfo($ch);

        //fetch errors
        $errorNumber = curl_errno($ch);
        $errorMessage = curl_error($ch);

        curl_close($ch);

        // replace ids with their string values, added because of some
        // PHP-version can't handle these large values
        $response = preg_replace('/id":(\d+)/', 'id":"\1"', $response);

        // we expect JSON, so decode it
        $json = @json_decode($response, true);

        // validate JSON
        if ($json === null) {
            // should we provide debug information
            if (self::DEBUG) {
                // make it output proper
                echo '<pre>';

                // dump the header-information
                var_dump($headers);

                // dump the error
                var_dump($errorMessage);

                // dump the raw response
                var_dump($response);

                // end proper format
                echo '</pre>';
            }

            // throw exception
            throw new Exception('Invalid response.');
        }

        // any errors
        if (isset($json['diagnostic']['error_msgs'])) {
            // should we provide debug information
            if (self::DEBUG) {                

                echo '<pre>';
                echo "<h3>Header</h3>";
                // dump the header-information
                var_dump($headers);

                echo "<h3>Error message</h3>";
                // dump the error
                var_dump($errorMessage);

                echo "<h3>Raw Response</h3>";
                // dump the raw response
                var_dump($response);

                echo "<h3>Response</h3>";
                var_dump($json);
                
                echo '</pre>';
                exit();
            }

            // throw exception
            /*
            if (isset($json['errors'][0]['message'])) {
                throw new Exception($json['errors'][0]['message']);
            } elseif (isset($json['errors']) && is_string($json['errors'])) {
                throw new Exception($json['errors']);
            } else throw new Exception('Invalid response.');
            */
        }

        return $json;
    }

    /**
     * GET
     * Abstraction of the GET request
     */
    private function GET($url,$params=false){
        return $this->Request($url,$params,HTTP_GET);
    }

    /**
     * POST
     * Abstraction of a POST request
     */
    private function POST($url,$params=false){
        return $this->Request($url,$params,HTTP_POST);
    }

    
    // Helper Functions
    
    /**
     * GeoLocate
     * Leverages the google maps api to generate a lat/lng pair for a given address
     * packaged with FoursquareApi to facilitate locality searches.
     * @param String $addr An address string accepted by the google maps api
     * @return array(lat, lng) || NULL
     */
    public function GeoLocate($addr){
        $geoapi = "http://maps.googleapis.com/maps/api/geocode/json";
        $params = array("address"=>$addr,"sensor"=>"false");
        $response = $this->GET($geoapi,$params);
        $json = json_decode($response);
        if ($json->status === "ZERO_RESULTS") {
            return NULL;
        } else {
            return array($json->results[0]->geometry->location->lat,$json->results[0]->geometry->location->lng);
        }
    }
    
    /**
     * MakeUrl
     * Takes a base url and an array of parameters and sanitizes the data, then creates a complete
     * url with each parameter as a GET parameter in the URL
     * @param String $url The base URL to append the query string to (without any query data)
     * @param Array $params The parameters to pass to the URL
     */ 
    private function MakeUrl($url,$params){
        if(!empty($params) && $params){
            foreach($params as $k=>$v) $kv[] = "$k=$v";
            $url_params = str_replace(" ","+",implode('&',$kv));
            $url = trim($url) . '?' . $url_params;
        }
        return $url;
    }
    
    
    /*
    Search Flight
    Get Nearest Airport
    Get Popular Airport Destination
    Search Airport
    Check Update
    Get Lion Captcha
    Add order
    Order
    Delete Order
    Checkout Page request
    Checkout Login
    Available Payment
    Checkout Payment
    Confirm Payment
    */
    
    //OK
    public function GetToken()
    {
        $args['method'] = 'getToken';
        $args['secretkey'] = $this->SecretKey;
        $response = $this->GetPublic('apiv1','payexpress',$args);

        return (!empty($response['token'])) ? $response['token'] : '';
    }

    //OK
    public function RenewToken($old_token = "")
    {
        $args['method'] = 'getToken';
        $args['secretkey'] = $this->SecretKey;
        $args['token'] = $old_token;

        $response = $this->GetPublic('apiv1','payexpress',$args);

        return (!empty($response['token'])) ? $response['token'] : '';
    }
    
    public function SearchFlight($args)
    {
        $args = array_merge(array(
            'depart' => 'CGK',
            'arrive' => 'DPS',
            'date' => '2013-09-21',
            'return_date' => '',
            'adult' => 1,
            'child' => 0,
        ),$args);

        $params = array(
            'd' => $args['depart'],
            'a' => $args['arrive'],
            'date' => $args['date'],
            'ret_date' => $args['return_date'],
            'adult' => $args['adult'],
            'child' => $args['child'],
            'token' => $this->Token
        );
        
        $response = $this->GetPublic('search','flight',$params);
        
        //https://api.master18.tiket.com/search/flight?d=CGK&a=DPS&date=2012-06-30&adult=1&child=0&infant=0&ret_date=&token=38d1996c567c688e1b285f464a12ea83&output=json
        
        //var_dump($response);
      
        return $response;
    }

    //OK
    public function GetFlightPromo()
    {
        //http://api.master18.tiket.com/general_api/get_flight_promo?token=a7edd51b2808248ebffdec4c4596c862&output=json

        $params = array(
            'token' => $this->Token
        );
        
        $response = $this->GetPublic('general_api','get_flight_promo',$params);
        
        return (!empty($response['promos']['result'])) ? $response['promos']['result'] : array();
    }
    
    //OK
    public function GetNearestAirport($ipAddress)
    {
        $params = array(
            'ip' => $ipAddress,
            'token' => $this->Token
        );
        $response = $this->GetPublic('flight_api','getNearestAirport',$params);
        //http://api.master18.tiket.com/flight_api/getNearestAirport?token=905f0af68759becf520885084c42469b&ip=112.78.141.194&output=json

        return (!empty($response['nearest_airports']['airport'])) ? $response['nearest_airports']['airport'] : array();
    }   
    
    //OK
    //Get Popular Airport Destination
    public function GetPopularAirportDestination($depart)
    {
        //https://api.master18.tiket.com/flight_api/getPopularDestination?token=2d5717e45a8f7637470b4eb2514e4e64&depart=MES&output=json
        
        $params = array(
            'depart' => $depart,
            'token' => $this->Token
        );

        $response = $this->GetPublic('flight_api','getPopularDestination',$params);
        return (!empty($response['popular_destinations']['airport'])) ? $response['popular_destinations']['airport'] : array();
    }
    
    //ok
    public function GetAllAirport()
    {
        //https://api.master18.tiket.com/flight_api/all_airport?token=38d1996c567c688e1b285f464a12ea83&output=json
        $params = array(
            'token' => $this->Token,
        );

        $response = $this->GetPublic('flight_api','all_airport',$params);
        return (!empty($response['all_airport']['airport'])) ? $response['all_airport']['airport'] : array();
    }


    public function GetLowestRoute($args)
    {
        //http://api.master18.tiket.com/flight_api/get_lowest_rute_price?token=96d6084fa2278b70d7eccf4b7b734c24&from=MES&date=2012-12-22
        $args = array_merge(array(
            'from'          => 'MES',
            'date'          => '2013-09-11',
            'return_date'   => null,
            'adult'         => 1,
            'child'         => 0,
            'infant'        => 0,
            //'maxprice'    => 9999999999,
            //'minprice'    => 0

        ),$args);

        $params = array(
            'from'      => $args['from'],
            'date'      => $args['date'],
            'ret_date'  => $args['return_date'],
            'adult'     => $args['adult'],
            'infant'    => $args['infant'],
            'maxprice'  => (!empty($args['maxprice'])) ? $args['maxprice'] : false,
            'minprice'  => (!empty($args['minprice'])) ? $args['minprice'] : false,
            'token'     => $this->Token,
        );
        
        $response = $this->GetPublic('flight_api','get_lowest_rute_price',$params);
        return $response;
    }
    
    //HOTEL ----------------------------------------------------//
    
    public function SearchHotel($args)
    {
        //https://api.master18.tiket.com/search/hotel?q=Indonesia&startdate=2012-06-11&night=1&enddate=2012-06-12&room=1&adult=2&child=0&token=1c78d7bc29690cd96dfce9e0350cfc51&output=json

        $args = array_merge(array(
            'keyword' => 'Indonesia',
            'start_date' => '2013-09-11',
            'night' => 1,
            'end_date' => '',
            'room' => 1,
            'adult' => 2,
            'child' => 0,
            'sort' => 'popular', //popular/starasc/stardesc/priceasc/pricedesc
            'minprice' => 0,
            'maxprice' => 0,
            'minstar' => 0,
            'maxstar' => 0,
            'latitude' => 0,
            'longitude' => 0
        ),$args);
        
        $params = array(
            'q' => $args['keyword'],
            'startdate' => $args['start_date'],
            'night' => $args['night'],
            'enddate' => $args['end_date'],
            'room' => $args['room'],
            'adult' => $args['adult'],
            'child' => $args['child'],
            'sort' => $args['sort'],
            'minprice' => $args['minprice'],
            'maxprice' => $args['maxprice'],
            'minstar' => $args['minstar'],
            'maxstar' => $args['maxstar'],
            'latitude' => $args['latitude'],
            'longitude' => $args['longitude'],
            'token' => $this->Token
        );
        
        $response = $this->GetPublic('search','hotel',$params);
        //var_dump($response);
        //exit();        
        //return(json_decode($response, true));
        return $response;
    }
    
    //Search Autocomplete
    //....
    
    
    
    //EVENT --------------------------------------------------------
    
    public function SearchEvent($keyword, $token)
    {
        //https://api.master18.tiket.com/search/event?q=&token=c551ad2aee8e7acf14907c0fac2644d9&output=json
        
        $params = array(
            'q' => $keyword,
            'token' => $token,
            'output' => 'json'
        );
        
        $response = $this->GetPublic('search','event',$params);
        
        //return(json_decode($response, true));       
        return $response;
    }
    
    
    //TRAIN-----------------------------------
    
    //OK
    public function SearchTrain($args)
    {
        //https://api.master18.tiket.com/search/train?d=GMR&a=BD&date=2012-06-03&ret_date=&adult=1&child=0&class=all&token=80bfe5297f7c4fbaa7a1e6c022585946&output=json

        $args = array_merge(array(
            'depart' => 'GMR',
            'arrive' => 'BD',
            'date' => '2013-09-21',
            'return_date' => '',
            'adult' => 1,
            'child' => 0,
            'class' => 'all'
        ),$args);
        
        $params = array(
            'd' => $args['depart'],
            'a' => $args['arrive'],
            'date' => $args['date'],
            'ret_date' => $args['return_date'],
            'adult' => $args['adult'],
            'child' => $args['child'],
            'class' => $args['class'],
            'token' => $this->Token,
        );
        
        $response = $this->GetPublic('search','train',$params);

        return (!empty($response['departures']['result'])) ? $response['departures']['result'] : array();        
    }
    
    //OK
    public function SearchStation()
    {
        //https://api.master18.tiket.com/train_api/train_station?token=11b534a0394d9bb140f18bc1a87adf1a&output=json
        $params = array(
            'token' => $this->Token,
        );
        
        $response = $this->GetPublic('train_api','train_station',$params);

        return (!empty($response['stations']['station'])) ? $response['stations']['station'] : array();
    }
    
    
}
